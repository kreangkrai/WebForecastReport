@using Microsoft.AspNetCore.Http
@model WebForecastReport.Models.UserModel;
@{
    ViewData["Title"] = "Calendar";
}
<div class="row p-3">
    <div class="col-xl-12">
        <div class="card">
            <div class="card-body">
                <div id="calendar"></div>
            </div>
        </div>
    </div>
</div>

<!-- Task Modal -->
<div class="modal fade" id="modal_task" tabindex="-1" role="dialog" data-backdrop="static">
    <div class="modal modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modal_task_title">Add Tasks</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-group" hidden>
                        <label for="ind">Index</label>
                        <input id="ind" type="text" class="form-control" />
                    </div>
                    <div class="form-group" hidden>
                        <label for="user_id">User</label>
                        <select id="user_id" class="form-control" disabled></select>
                    </div>
                    <div id="working_date_group" class="form-group">
                        <label for="working_date">Date</label>
                        <input id="working_date" type="date" class="form-control" disabled/>
                    </div>
                    <div id="date_group" class="form-group row">
                        <div class="col-6">
                            <label for="start_date">From</label>
                            <input id="start_date" type="date" class="form-control" />
                        </div>
                        <div class="col-6">
                            <label for="stop_date">To</label>
                            <input id="stop_date" type="date" class="form-control" />
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="job_id">Job</label>
                        <select id="job_id" class="form-control"></select>
                    </div>
                    <div class="form-group row">
                        <div class="col-6">
                            <label for="location">Location</label>
                            <select id="location" class="form-control"></select>
                        </div>
                        <div class="col-6">
                            <label for="task_id">Task</label>
                            <select id="task_id" class="form-control"></select>
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-6">
                            <label for="start_time">From</label>
                            <input id="start_time" type="time" class="form-control" />
                        </div>
                        <div class="col-6">
                            <label for="stop_time">To</label>
                            <input id="stop_time" type="time" class="form-control" />
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="note">Note</label>
                        <input id="note" type="text" class="form-control" placeholder="Note or Description" />
                    </div>
                </form>
            </div>
            <div class="modal-footer d-flex">
                <button id="btn_delete" type="button" class="btn btn-danger mr-auto elevation-1">
                    <i class="fas fa-trash-alt"></i> Delete
                </button>
                <button type="button" class="btn btn-secondary elevation-1" data-dismiss="modal">
                    <i class="fas fa-times"></i> Close
                </button>
                <button id="btn_accept" type="button" class="btn btn-primary elevation-1">
                    <i class="fas fa-check"></i> Accept
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Modal Alert -->
<div class="modal fade" id="modal_alert" tabindex="-1" role="dialog" data-backdrop="static">
    <div class="modal modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header bg-warning">
                <h5 class="modal-title" id="modal_alert_title">Alert</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="alert_content" class="form-group">

                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal Delete -->
<div id="modal_delete" class="modal fade">
    <div class="modal modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header bg-danger">
                <h5 class="modal-title" id="modal_alert_title">Delete</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-group">
                        <span>Are you sure you want to delete this ?</span>
                    </div>
                </form>
            </div>
            <div class="modal-footer d-flex">
                <button id="btn_confirm_delete" type="button" class="btn btn-danger elevation-1 mr-auto">
                    <i class="fas fa-trash-alt"></i> Confirm Delete
                </button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">
                    <i class="fas fa-times"></i> Cancel
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    <script type="text/javascript">
        //Variable Declaration
        var users = [];
        var jobs = [];
        var quotations = [];
        var tasks = [];
        var holidays = [];
        var wh_day = [];
        var calendar;
        var calendarEl;
        var update = false;
        var drag = false;
        var overlap = true;
        var eng;

        //Change these variable to true for show data response
        var debug_user = false;
        var debug_jobs = false;
        var debug_quotations = false;
        var debug_tasks = false;
        var debug_holiday = false;
        var debug_whs = false;
        var debug_whs_datas = false;
        var debug_accept = false;
        var debug_wh_day = false;
        var debug_edit = false;
        var debug_drop = false;

        $(document).ready(async function () {
            await GetHolidays();
            await GetEngineerUser("@Model.name");
            await GetWorkingHours("@Model.name");
            await GetUsers();
            await GetJobs();
            await GetTasks();
        });

        async function GetUsers() {
            await $.ajax({
                type: "GET",
                url: '@Url.Action("GetUsers", "EngUser")',
	            contentType: 'application/x-www-form-urlencoded',
                data: { },
                success: function (response) {
                    users = response;
                    if (debug_user) {
                        console.log(users);
                    }
                }
            });
        }

        async function GetJobs() {
            var user_id = '@Model.name';
            await $.ajax({
                type: "GET",
                url: '@Url.Action("GetJobs", "Calendar")',
	            contentType: 'application/x-www-form-urlencoded',
                data: { user_id },
                success: function (response) {
                    jobs = response;
                    if (debug_jobs) {
                        console.log("Jobs");
                        console.log(jobs);
                    }
                }
            });
        };

        async function GetQuotations() {
            var user_id = '@Model.name';
            await $.ajax({
                type: "GET",
                url: '@Url.Action("GetQuotations", "Calendar")',
	            contentType: 'application/x-www-form-urlencoded',
                data: { user_id },
                success: function (response) {
                    quotations = response;
                    if (debug_quotations) {
                        console.log("Quotations");
                        console.log(quotations);
                    }
                }
            });
        };

        async function GetTasks() {
            await $.ajax({
                type: "GET",
                url: '@Url.Action("GetAllTasks", "Tasks")',
	            contentType: 'application/x-www-form-urlencoded',
                data: { },
                success: function (response) {
                    tasks = response;
                    if (debug_tasks) {
                        console.log("Tasks");
                        console.log(tasks);
                    }
                }
            });
        };

        async function GetHolidays() {
            await $.ajax({
                type: "GET",
                url: '@Url.Action("GetHolidays", "Holiday")',
	            contentType: 'application/x-www-form-urlencoded',
                data: { },
                success: function (response) {
                    holidays = response;
                    if (debug_holiday) {
                        console.log("Holidays");
                        console.log(holidays);
                    }
                }
            });
        };

        async function GetWorkingHours(user_id) {
            await $.ajax({
                type: "GET",
                url: '@Url.Action("GetWorkingHours", "Calendar")',
	            contentType: 'application/x-www-form-urlencoded',
                data: { user_id },
                success: function (response) {
                    if (debug_whs) {
                        console.log("Working Hours Data");
                        console.log(response);
                    }
                    GenerateCalendar(response);
                }
            });
        };

        async function GetWorkingHoursByDate(user_id,working_date) {
            await $.ajax({
                type: "GET",
                url: '@Url.Action("GetWorkingHoursByDate", "Calendar")',
	            contentType: 'application/x-www-form-urlencoded',
                data: {
                    user_id, working_date
                },
                success: function (response) {
                    wh_day = response;
                    if (debug_wh_day) {
                        console.log(wh_day);
                    }
                }
            });
        }

        async function GenerateCalendar(whs) {
            var datas = [];
            for (var i = 0; i < whs.length; i++) {
                var start_date = new Date(whs[i].working_date);
                var enable_edit = false;

                if (eng.role === "Admin" || eng.allow_edit === true) {
                    enable_edit = true;
                } else {
                    var today = new Date();
                    var date_diff = Math.floor((today - start_date) / (1000 * 60 * 60 * 24));
                    enable_edit = date_diff < 15 ? true : false;
                }

                datas.push(
                    {
                        title: whs[i].job_name + ": " + whs[i].task_name,
                        start: start_date.setHours(whs[i].start_time.split(":")[0], whs[i].start_time.split(":")[1]),
                        end: start_date.setHours(whs[i].stop_time.split(":")[0], whs[i].stop_time.split(":")[1]),
                        allDay: false,
                        editable: enable_edit,
                        overlap: true,
                        extendedProps: {
                            "index": whs[i].index,
                            "user_id": whs[i].user_id,
                            "user_name": whs[i].user_name,
                            "working_date": whs[i].working_date,
                            "job_id": whs[i].job_id,
                            "job_name": whs[i].job_name,
                            "task_id": whs[i].task_id,
                            "task_name": whs[i].task_name,
                            "start_time": whs[i].start_time,
                            "stop_time": whs[i].stop_time,
                            "wh_type": whs[i].wh_type,
                            "lunch": whs[i].lunch,
                            "dinner": whs[i].dinner,
                            "note": whs[i].note,
                        }
                    }
                );
            }

            if (debug_whs_datas) {
                console.log("Calendar Working Hours Data");
                console.log(datas);
            }

            calendarEl = document.getElementById('calendar');
            calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'dayGridMonth',
                views: {
                    dayGridMonth: {
                        displayEventTime: true,
                        displayEventEnd: true,
                        eventTimeFormat: {
                            hour: '2-digit',
                            minute: '2-digit',
                            hour12: false,
                            meridiem: false
                        },
                    }
                },
                headerToolbar: {
                    left: 'dayGridMonth,listMonth,timeGridWeek,timeGridDay',
                    center: 'title',
                    right: 'prev,next'
                },
                events: datas,
                height: 750,
                editable: true,
                eventDrop: async function (info) {
                    var enable = false;
                    var drop_date = new Date(info.event.startStr.split("T")[0]);
                    var today = new Date();
                    var date_diff = Math.floor((today - drop_date) / (1000 * 60 * 60 * 24));
                    var drop_overlap = await CheckDropOverlap(info.event.extendedProps, drop_date.toISOString().split("T")[0]);
                    if (drop_overlap === true) {
                        $('#modal_alert_title').text('Alert Task Overlap');
                        $('#alert_content').html('<p>Task Overlap</p>');
                        $('#modal_alert').modal();
                        info.revert();
                        return;
                    }

                    if (date_diff < 15) {
                        enable = true;
                    }
                    else {
                        enable = CheckAllowEditable();
                    }

                    if (enable == true) {
                        DropTask(info.event);
                    }
                    else {
                        $('#modal_alert_title').text('Alert Edit Task');
                        $('#alert_content').html('<p>You are not allow to edit task in beyond past 2 weeks</p>');
                        $('#modal_alert').modal();
                        info.revert();
                    }
                },
                selectable: true,
                select: function (info) {
                    var date_start = info.startStr;
                    var date_end = info.endStr.split("-")[0] + "-" + info.endStr.split("-")[1] + "-" + parseInt(info.endStr.split("-")[2] - 1).toString().padStart(2,'0');
                    var date_diff = Math.floor((new Date(date_end) - new Date(date_start)) / (1000 * 60 * 60 * 24));
                    if (date_diff === 0 || isNaN(date_diff)) {
                        AddTask(date_start)
                    }
                    else {
                        AddTasks(date_start,date_end)
                    }
                },
                eventClick: function (info) {
                    EditTask(info.event);
                },
            });

            var weekend = [
                {
                    daysOfWeek: [0, 6],
                    display: 'background',
                    color: "#CCCCCC",
                    allDay: true,
                    overlap: true,
                    resourceEditable: false
                }
            ];
            calendar.addEventSource(weekend);

            var e_holidays = [];
            for (var i = 0; i < holidays.length; i++) {
                e_holidays.push(
                    {
                        id: holidays[i].no,
                        title: holidays[i].name,
                        start: holidays[i].date.split("T")[0],
                        display: 'background',
                        color: "#FF9999",
                        allDay: true,
                        overlap: true,
                        resourceEditable: false
                    }
                );
            }

            calendar.addEventSource(e_holidays);
            calendar.render();
        }

        function GenerateUsersOption() {
            $('#user_id').empty();
            var user_string = `<option value="" selected disabled>Please Select User</option>`;
            for (var i = 0; i < users.length; i++) {
                user_string += `<option value="${users[i].user_id}">${users[i].user_name}</option>`;
            }
            $('#user_id').append(user_string);
        }

        function GenerateJobsOption() {
            var jobs_str = `<option value="" selected disabled>Please Select Job</option>`;
            for (var i = 0; i < jobs.length; i++) {
                jobs_str += `<option value="${jobs[i].job_id}">${jobs[i].job_id}: ${jobs[i].job_name}</option>`;
            }
            for (var i = 0; i < quotations.length; i++) {
                jobs_str += `<option value="${quotations[i].quotation_no}">${quotations[i].quotation_no}: ${quotations[i].project_name}</option>`;
            }
            $('#job_id').empty();
            $('#job_id').append(jobs_str);
        }

        function GenerateTasksOption() {
            var tasks_str = `<option value="" selected disabled>Please Select Task</option>`;
            for (var i = 0; i < tasks.length; i++) {
                tasks_str += `<option value="${tasks[i].task_id}">${tasks[i].task_name}</option>`;
            }
            $('#task_id').empty();
            $('#task_id').append(tasks_str);
        }

        async function CheckAllowEditable() {
            var user_id = '@Model.name';
            var allow = false;
            await $.ajax({
                type: "GET",
                url: '@Url.Action("CheckAllowEditable", "Calendar")',
	            contentType: 'application/x-www-form-urlencoded',
                data: { user_id },
                success: function (response) {
                    allow = response;
                }
            });
            return allow;
        }

        async function AddTask(date_start) {
            var show_modal = 0;
            var today = new Date();
            var edit_date = new Date(date_start);
            var date_diff = Math.floor((today - edit_date) / (1000 * 60 * 60 * 24));

            if (date_diff < 15) {
                show_modal = 1;
            }
            else {
                show_modal = await CheckAllowEditable();
            }

            if (show_modal) {
                update = false;
                if (wh_day !== null) {
                    wh_day = [];
                }
                await GetUsers();
                await GenerateUsersOption();
                await GetWorkingHoursByDate("@Model.name", date_start);
                await GetJobs();
                await GetQuotations();
                await GenerateJobsOption();
                await GenerateLocationOption();
                await GetTasks();
                await GenerateTasksOption();
                await PrepmodalTask(date_start);
            }
        }

        async function AddTasks(date_start, date_end) {
            var show_modal = 0;
            var today = new Date();
            var edit_date = new Date(date_start);
            var date_diff = Math.floor((today - edit_date) / (1000 * 60 * 60 * 24));

            if (date_diff < 15) {
                show_modal = 1;
            }
            else {
                show_modal = await CheckAllowEditable();
            }

            if (show_modal) {
                update = false;
                await GetUsers();
                await GenerateUsersOption();
                await GetJobs();
                await GetQuotations();
                await GenerateJobsOption();
                await GenerateLocationOption();
                await GetTasks();
                await GenerateTasksOption();
                PrepmodalTasks(date_start, date_end);
            }
        }

        function GenerateLocationOption() {
            $('#location').empty();
            var location_str = '<option value="" selected disabled>Please Select Location</option>';
            location_str += '<option value="O">Office</option>';
            location_str += '<option value="S">Site</option>';
            $('#location').append(location_str);
        }

        function PrepmodalTask(date_start) {
            $('#modal_task').modal();
            $('#modal_task_title').text("Add Task");
            $('#user_id').val('@Model.name');
            $('#working_date_group').show();
            $('#working_date').attr('disabled', true);
            $('#working_date').val(date_start);
            $('#date_group').hide();
            $('#start_date').val(null);
            $('#stop_date').val(null);
            $('#start_time').val(null);
            $('#stop_time').val(null);
            $('#note').val(null);
            $('#btn_delete').hide();
        }

        function PrepmodalTasks(date_start, date_end) {
            $('#modal_task').modal();
            $('#modal_task_title').text("Add Tasks");
            $('#user_id').val('@Model.name');
            $('#working_date_group').hide();
            $('#working_date').attr('disabled', true);
            $('#working_date').val(null);
            $('#date_group').show();
            $('#start_date').val(date_start);
            $('#stop_date').val(date_end);
            $('#location').attr('disabled', true);
            $('#task_id').attr('disabled', true);
            $('#start_time').val("08:30");
            $('#stop_time').val("17:30");
            $('#note').val(null);
            $('#btn_delete').hide();
        }

        $('#job_id').on('change', function () {
            var job_id = $('#job_id').val();
            var enable_location = (job_id !== "") ? 1 : 0;
            $('#location').attr('disabled', !enable_location);
        });

        $('#location').on('change', function () {
            var prefix = $('#location').val();
            var arr = tasks.filter(t => t.task_id.substring(0, 1) === prefix);
            var tasks_str = '<option value="" selected disabled>Please Select Task</option>';
            for (var i = 0; i < arr.length; i++) {
                tasks_str += '<option value="' + arr[i].task_id + '">' + arr[i].task_name + '</option>';
            }
            $('#task_id').empty();
            $('#task_id').append(tasks_str);
            var en = $('#job_id').val() !== "" ? true : false;
            $('#task_id').attr('disabled', !en);
        });

        $('#task_id').on('change', function () {
            var en = $('#job_id').val() !== "" ? true : false;
            en *= $('#task_id').val() !== "" ? true : false;
            if (en) {
                $('#start_time').attr('disabled', !en);
                if (wh_day.length === 0) {
                    $('#start_time').val("08:30");
                    $('#stop_time').attr('disabled', false);
                    $('#stop_time').val("17:30");
                }
            }
            else {
                $('#start_time').attr('disabled', !en);
                $('#start_time').val();
            }
        });

        $('#start_time').on('change focus', function () {
            var start_time = $('#start_time').val();
            document.getElementById("stop_time").min = start_time;
            $('#stop_time').attr('disabled', false);
            $('#stop_time').val(start_time);
            var date = new Date($('#working_date').val());
            date.setHours($('#start_time').val().split(":")[0]);
            date.setMinutes($('#start_time').val().split(":")[1]);
            if (date.getDay() == 0 || date.getDay() == 7) {
                $('#wh_type').val("OT1_5");
            } else if (date.getHours() >= 17 && date.getMinutes() >= 30) {
                $('#wh_type').val("OT1_5");
            }
        });

        $('#btn_accept').on('click', async function () {
            var user_id = $('#user_id').val();
            var working_date = $('#working_date').val();

            var start_date = $('#start_date').val();
            var stop_date = $('#stop_date').val();

            var job_id = $('#job_id').val();
            var task_id = $('#task_id').val();
            var start_time = $('#start_time').val();
            var stop_time = $('#stop_time').val();
            var note = $('#note').val();

            if (debug_accept) {
                console.log("Add Task");
                console.log("User ID -> " + user_id);
                console.log("Date -> " + working_date);
                console.log("Job -> " + job_id);
                console.log("Task -> " + task_id);
                console.log("From -> " + start_time);
                console.log("To -> " + stop_time);
                console.log("Note -> " + note);
            }

            if (update) {
                var wh_string = JSON.stringify({
                    "index": wh_index,
                    "user_id": user_id,
                    "working_date": working_date,
                    "job_id": job_id,
                    "task_id": task_id,
                    "start_time": start_time,
                    "stop_time": stop_time,
                    "note": note,
                });

                var enable_edit = false;
                if (eng.role === "Admin" || eng.allow_edit === true) {
                    enable_edit = true;
                } else {
                    var today = new Date();
                    var date_diff = Math.floor((today - working_date) / (1000 * 60 * 60 * 24));
                    enable_edit = date_diff < 15 ? true : false;
                }

                if (enable_edit) {
                    await UpdateWorkingHours(wh_string);
                }
                else {
                    $('#modal_alert_title').text('Alert Edit Task');
                    $('#alert_content').html('<p>You are not allow to edit task in beyond past 2 weeks</p>');
                    $('#modal_alert').modal();
                }
            }
            else {
                if (working_date !== "") {
                    var wh_string = JSON.stringify({
                        "user_id": user_id,
                        "working_date": working_date,
                        "job_id": job_id,
                        "task_id": task_id,
                        "start_time": start_time,
                        "stop_time": stop_time,
                        "note": note,
                    });
                    await AddWorkingHours(wh_string);
                }
                else {
                    var wh_strings = [];
                    var date_start = new Date(start_date);
                    var date_stop = new Date(stop_date);
                    for (var cur_date = date_start; cur_date <= date_stop; cur_date.setDate(cur_date.getDate() + 1)){
                        var task_overlap = false;
                        var wh_string = JSON.stringify({
                            "user_id": user_id,
                            "working_date": cur_date,
                            "job_id": job_id,
                            "task_id": task_id,
                            "start_time": start_time,
                            "stop_time": stop_time,
                            "note": note,
                        });
                        var task_overlap = false;
                        task_overlap = await CheckAddTasksOverlap(wh_string);
                        if (task_overlap === false) {
                            wh_strings.push(wh_string);
                        }
                    }
                    await AddWorkingHoursDays(wh_strings);
                }
            }
        });

        $('#btn_delete').on('click', function () {
            $('#modal_delete').modal();
        });

        $('#btn_confirm_delete').on('click', async function () {
            var user_id = $('#user_id').val();
            var working_date = $('#working_date').val();

            var job_id = $('#job_id').val();
            var task_id = $('#task_id').val();
            var start_time = $('#start_time').val();
            var stop_time = $('#stop_time').val();
            var wh_type = ($('#wh_type').val() === "") ? "REG" : $('#wh_type').val();

            var lunch = $('#lunch').prop('checked');
            var dinner = $('#dinner').prop('checked');
            var note = $('#note').val();

            var wh_string = JSON.stringify({
                "index": wh_index,
                "user_id": user_id,
                "working_date": working_date,
                "job_id": job_id,
                "task_id": task_id,
                "start_time": start_time,
                "stop_time": stop_time,
                "wh_type": wh_type,
                "lunch": lunch,
                "dinner": dinner,
                "note": note,
            });
            await DeleteWorkingHours(wh_string);
        })

        async function CheckAddOverlap(wh_string) {
            var task = JSON.parse(wh_string);
            var date = task.working_date;
            var start_time = new Date();
            start_time.setHours(task.start_time.split(":")[0]);
            start_time.setMinutes(task.start_time.split(":")[1]);
            start_time.setSeconds(0);
            start_time.setMilliseconds(0);
            var stop_time = new Date();
            stop_time.setHours(task.stop_time.split(":")[0]);
            stop_time.setMinutes(task.stop_time.split(":")[1]);
            stop_time.setSeconds(0);
            stop_time.setMilliseconds(0);
            await GetWorkingHoursByDate("@Model.name", date);
            if (update) {
                wh_day = wh_day.filter(f => f.index !== task.index);
            }
            for (var i = 0; i < wh_day.length; i++) {
                var task_start = new Date();
                var task_stop = new Date();
                task_start.setHours(wh_day[i].start_time.split(":")[0]);
                task_start.setMinutes(wh_day[i].start_time.split(":")[1]);
                task_start.setSeconds(0);
                task_start.setMilliseconds(0);
                task_stop.setHours(wh_day[i].stop_time.split(":")[0]);
                task_stop.setMinutes(wh_day[i].stop_time.split(":")[1]);
                task_stop.setSeconds(0);
                task_stop.setMilliseconds(0);
                if (start_time >= task_start && start_time < task_stop) {
                    return true;
                }
                if (stop_time > task_start && stop_time < task_stop) {
                    return true;
                }
                if (task_start >= start_time && task_start < stop_time) {
                    return true;
                }
                if (task_stop > start_time && task_stop < stop_time) {
                    return true;
                }
            }
            return false;
        }

        async function CheckAddTasksOverlap(wh_string) {
            var task = JSON.parse(wh_string);
            var date = task.working_date;
            var start_time = new Date();
            start_time.setHours(task.start_time.split(":")[0]);
            start_time.setMinutes(task.start_time.split(":")[1]);
            start_time.setSeconds(0);
            start_time.setMilliseconds(0);
            var stop_time = new Date();
            stop_time.setHours(task.stop_time.split(":")[0]);
            stop_time.setMinutes(task.stop_time.split(":")[1]);
            stop_time.setSeconds(0);
            stop_time.setMilliseconds(0);
            await GetWorkingHoursByDate("@Model.name", date);
            for (var i = 0; i < wh_day.length; i++) {
                var task_start = new Date();
                var task_stop = new Date();
                task_start.setHours(wh_day[i].start_time.split(":")[0]);
                task_start.setMinutes(wh_day[i].start_time.split(":")[1]);
                task_start.setSeconds(0);
                task_start.setMilliseconds(0);
                task_stop.setHours(wh_day[i].stop_time.split(":")[0]);
                task_stop.setMinutes(wh_day[i].stop_time.split(":")[1]);
                task_stop.setSeconds(0);
                task_stop.setMilliseconds(0);
                if (start_time >= task_start && start_time < task_stop) {
                    return true;
                }
                if (stop_time > task_start && stop_time < task_stop) {
                    return true;
                }
                if (task_start >= start_time && task_start < stop_time) {
                    return true;
                }
                if (task_stop > start_time && task_stop < stop_time) {
                    return true;
                }
            }
            return false;
        }

        async function CheckDropOverlap(task, date) {
            var start_time = new Date();
            start_time.setHours(task.start_time.split(":")[0]);
            start_time.setMinutes(task.start_time.split(":")[1]);
            start_time.setSeconds(0);
            start_time.setMilliseconds(0);
            var stop_time = new Date();
            stop_time.setHours(task.stop_time.split(":")[0]);
            stop_time.setMinutes(task.stop_time.split(":")[1]);
            stop_time.setSeconds(0);
            stop_time.setMilliseconds(0);
            await GetWorkingHoursByDate("@Model.name", date);
            for (var i = 0; i < wh_day.length; i++) {
                var task_start = new Date();
                task_start.setHours(wh_day[i].start_time.split(":")[0]);
                task_start.setMinutes(wh_day[i].start_time.split(":")[1]);
                task_start.setSeconds(0);
                task_start.setMilliseconds(0);
                var task_stop = new Date();
                task_stop.setHours(wh_day[i].stop_time.split(":")[0]);
                task_stop.setMinutes(wh_day[i].stop_time.split(":")[1]);
                task_stop.setSeconds(0);
                task_stop.setMilliseconds(0);
                if (start_time >= task_start && start_time < task_stop) {
                    return true;
                }
                if (stop_time > task_start && stop_time < task_stop) {
                    return true;
                }
                if (task_start >= start_time && task_start < stop_time) {
                    return true;
                }
                if (task_stop > start_time && task_stop < stop_time) {
                    return true;
                }
            }
            return false;
        }

        async function GetEngineerUser(user_id) {
            await $.ajax({
                type: "GET",
                url: '@Url.Action("GetEngineerUser", "Calendar")',
	            contentType: 'application/x-www-form-urlencoded',
                data: { user_id },
                success: function (response) {
                    eng = response;
                }
            });
        }

        var wh_index;
        async function EditTask(event) {
            update = true;
            var user_id = event.extendedProps.user_id;
            var date = event.extendedProps.working_date;
            await GetUsers();
            await GenerateUsersOption();
            await GetWorkingHoursByDate(user_id, date.split("T")[0]);
            await GetJobs();
            await GetQuotations();
            await GenerateJobsOption();
            await GenerateLocationOption();
            PrepmodalEditTask(event.extendedProps);
        }

        function DropTask(event) {
            drag = true;
            var task = event.extendedProps;
            task.working_date = event.startStr.split("T")[0];
            var wh_string = JSON.stringify({
                "index": task.index,
                "user_id": task.user_id,
                "working_date": event.startStr.split("T")[0],
                "job_id": task.job_id,
                "task_id": task.task_id,
                "start_time": task.start_time,
                "stop_time": task.stop_time,
                "wh_type": task.wh_type,
                "lunch": task.lunch,
                "dinner": task.dinner,
                "note": task.note,
            });
            UpdateWorkingHours(wh_string);
            event.setExtendedProp("working_date", event.startStr.split("T")[0]);
        }

        async function PrepmodalEditTask(task) {
            wh_index = task.index;
            $('#job_id').val(task.job_id);
            await GetTasks();
            await GenerateTasksOption();
            $('#location').val(task.task_id[0]);
            $('#task_id').val(task.task_id);
            if (debug_edit) {
                console.log(task);
            }
            $('#modal_task').modal();
            $('#modal_task_title').text("Edit Task");
            $('#user_id').val(task.user_id);
            $('#working_date_group').show();
            $('#working_date').val(task.working_date.split("T")[0]);
            $('#date_group').hide();
            $('#start_date').val(null);
            $('#stop_date').val(null);
            $('#start_time').val(task.start_time);
            $('#stop_time').val(task.stop_time);
            $('#note').val(task.note);
            $('#btn_delete').show();
        }

        async function AddWorkingHours(wh_string) {
            var add_overlap = await CheckAddOverlap(wh_string);
            if (add_overlap === false) {
                await $.ajax({
                    type: "POST",
                    url: '@Url.Action("AddWorkingHours", "Calendar")',
                    contentType: 'application/x-www-form-urlencoded',
                    data: {
                        wh_string
                    },
                    success: function (response) {
                        if (response == "Success") {
                            location.reload();
                        }
                        else {
                            toastr.error(response);
                        }
                    }
                });
            } else {
                $('#modal_alert_title').text('Alert Task Overlap');
                $('#alert_content').html('<p>Task Overlap</p>');
                $('#modal_alert').modal();
            }
        }

        async function AddWorkingHoursDays(wh_strings) {
            await $.ajax({
                type: "POST",
                url: '@Url.Action("AddWorkingHoursDays", "Calendar")',
	            contentType: 'application/x-www-form-urlencoded',
                data: {
                    wh_strings
                },
                success: function (response) {
                    if (response == "Success") {
                        location.reload();
                    }
                    else {
                        toastr.error(response);
                    }
                }
            });
        }

        async function UpdateWorkingHours(wh_string) {
            var edit_overlap = await CheckAddOverlap(wh_string);
            if (edit_overlap === false) {
                await $.ajax({
                    type: "PATCH",
                    url: '@Url.Action("EditWorkingHours", "Calendar")',
	                contentType: 'application/x-www-form-urlencoded',
                    data: {
                        wh_string
                    },
                    success: function (response) {
                        if (response == "Success") {
                            if(!drag)
                                location.reload();
                        }
                        else {
                            alert(response);
                        }
                    }
                });
            }
            else {
                $('#modal_alert_title').text('Alert Task Overlap');
                $('#alert_content').html('<p>Task Overlap</p>');
                $('#modal_alert').modal();
            }
        }

        async function DeleteWorkingHours(wh_string) {
            await $.ajax({
                type: "DELETE",
                url: '@Url.Action("DeleteWorkingHours", "Calendar")',
	            contentType: 'application/x-www-form-urlencoded',
                data: {
                    wh_string
                },
                success: function (response) {
                    if (response == "Success")
                        location.reload();
                }
            });
        }

    </script>
}