@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Home";
}
<style>
    .highlight {
        font-weight: bold;
    }

    .dataTables_scrollHeadInner,
    .table {
        width: 100% !important;
    }
</style>
<div class="row pt-3">
    <div class="col-md-12 col-xl-12">
        <ul class="nav nav-tabs pb-2" id="myTab" role="tablist">
            <li class="nav-item" role="presentation">
                <a class="nav-link active" id="tab_a" data-toggle="tab" href="#dashboard_a" role="tab" aria-controls="dashboard_a" aria-selected="true"><b>Dashboard</b></a>
            </li>
            <li class="nav-item" role="presentation">
                <a class="nav-link" id="tab_b" data-toggle="tab" href="#dashboard_b" role="tab" aria-controls="dashboard_b" aria-selected="false"><b>Performance</b></a>
            </li>
        </ul>
    </div>
    <div class="tab-content container-fluid" id="myTabContent">
        <div class="tab-pane fade show active " id="dashboard_a" role="tabpanel" aria-labelledby="home-tab">
            <div class="row pt-3">
                <div class="col-md-6 col-xl-6">
                    <div class="row">
                        <div class="col-md-3 col-xl-3 pb-3">
                            <select id="years_dashboard" class="form-control">
                            </select>
                        </div>
                        <div class="col-md-4 col-xl-4 pb-3">
                            <select id="sale_name" class="form-control">
                            </select>
                        </div>
                        <div class="col-md-3 col-xl-3 pb-4">
                            <button type="button" id="btn_OK" class="btn btn-primary form-control">OK</button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12 col-xl-12">
                    <div class="row">
                        <div class="col-md-4 col-xl-4">
                            <div class="card bg-dark" style="height:500px">
                                <div class="card-header">
                                    <span class="card-title">Type</span>
                                </div>
                                <div class="card-body">
                                    <div class="w-90 h-90 pt-5">
                                        <canvas id="pie_chart_type"></canvas>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4 col-xl-4">
                            <div class="card bg-dark" style="height:500px">
                                <div class="card-header">
                                    <span class="card-title">Won - Lost</span>
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-md-12 col-xl-12">
                                            <div class="pt-1">
                                                <canvas id="pie_chart_won" style="width:200px;height:200px"></canvas>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-12 col-xl-12">
                                            <div class="pt-1">
                                                <canvas id="pie_chart_lost" style="width:200px;height:200px"></canvas>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4 col-xl-4">
                            <div class="card bg-dark" style="height:500px">
                                <div class="card-header">
                                    <span class="card-title">No go - Pending</span>
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-md-12 col-xl-12">
                                            <div class="pt-1">
                                                <canvas id="pie_chart_nogo" style="width:200px;height:200px"></canvas>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-12 col-xl-12">
                                            <div class="pt-1">
                                                <canvas id="pie_chart_pending" style="width:200px;height:200px"></canvas>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-md-12 col-xl-12">
                    <div class="row">
                        <div class="col-md-4 col-xl-4">
                            <div class="card bg-dark" style="height:500px">
                                <div class="card-header">
                                    <span class="card-title">Stages</span>
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-md-12 col-xl-12">
                                            <div class="w-100 h-100">
                                                <canvas id="pie_chart_stages"></canvas>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-8 col-xl-8">
                            <div class="card bg-dark " style="height:auto">
                                <div class="card-header">
                                    <span class="card-title">Stages Day</span>
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-md-6 col-xl-6 pt-3">
                                            <div class="w-100">
                                                <canvas id="bar_chart_stages" style="height:350px"></canvas>
                                            </div>
                                        </div>
                                        <div class="col-md-6 col-xl-6 pt-2">
                                            <div style="overflow:auto; height:400px">
                                                <table id="table_stages" class="table table-sm cell-border  table-dark  table-bordered display responsive nowrap" style="width:100%;">
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="tab-pane fade" id="dashboard_b" role="tabpanel" aria-labelledby="home-tab">
            <div class="row pt-3">
                <div class="col-md-6 col-xl-6">
                    <div class="row">
                        <div class="col-md-3 col-xl-3 pb-3">
                            <select id="years_performance" class="form-control">
                            </select>
                        </div>
                        <div class="col-md-4 col-xl-4 pb-3">
                            <select id="departments" class="form-control">
                            </select>
                        </div>
                        <div class="col-md-3 col-xl-3 pb-4">
                            <button type="button" id="btn_performance_OK" class="btn btn-primary form-control">OK</button>
                        </div>
                    </div>
                </div>
                <div class="col-md-12 col-xl-12 pt-2">
                    <div class="row">
                        <div class="col-md-12 col-xl-12">
                            <div class="card bg-dark" style="height:500px">
                                <div class="card-header">
                                    <span class="card-title">Performance</span>
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-md-6 col-xl-6">
                                            <div class="w-100">
                                                <canvas id="performance_bar" style="height:350px"></canvas>
                                            </div>
                                        </div>
                                        <div class="col-md-6 col-xl-6">
                                            <div style="overflow:auto; height:400px">
                                                <table id="table_performance_stack" class="table table-sm cell-border  table-dark  table-bordered display responsive nowrap" style="width:100%;">
                                                    <thead class="text-center" style="background-color:#0F8DF6;color:black">
                                                        <tr>
                                                            <th style="text-align:center;">Sales Name</th>
                                                            <th style="text-align:center;">Target (MB)</th>
                                                            <th style="text-align:center;">Actual (MB)</th>
                                                            <th style="text-align:center;">Actual (%)</th>
                                                        </tr>
                                                    </thead>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-12 col-xl-12 pt-2">
                    <div style="overflow:auto; height:400px">
                        <table id="table_performance" class="table table-sm cell-border  table-dark  table-bordered display responsive nowrap" style="width:100%;">
                            <thead class="text-center" style="background-color:#0F8DF6;color:black">
                                <tr>
                                    <th rowspan="2" style="text-align:center;vertical-align:middle">Department</th>
                                    <th rowspan="2" style="text-align:center;vertical-align:middle">Sale Name</th>
                                    <th colspan="2" style="text-align:center;">Product(MB)</th>
                                    <th colspan="2" style="text-align:center;">Project(MB)</th>
                                    <th colspan="2" style="text-align:center;">Service(MB)</th>
                                    <th colspan="3" style="text-align:center;">Sales Total(MB)</th>
                                </tr>
                                <tr>
                                    <th style="text-align:center;">Target</th>
                                    <th style="text-align:center;">Actual</th>
                                    <th style="text-align:center;">Target</th>
                                    <th style="text-align:center;">Actual</th>
                                    <th style="text-align:center;">Target</th>
                                    <th style="text-align:center;">Actual</th>
                                    <th style="text-align:center;">Target</th>
                                    <th style="text-align:center;">Actual</th>
                                    <th style="text-align:center;">%</th>
                                </tr>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@section Scripts
    {
<script type="text/javascript">
    var Years = [];
    var Sales = [];
    var Departments = [];
    var Role = "";
    var Datas = [];
    var Data_Stages = [];
    var Data_Stages_Day = [];

    var product = "0";
    var project = "0";
    var service = "0";

    var won_product = "0";
    var won_project = "0";
    var won_service = "0";

    var lost_product = "0";
    var lost_project = "0";
    var lost_service = "0";

    var nogo_product = "0";
    var nogo_project = "0";
    var nogo_service = "0";

    var pending_product = "0";
    var pending_project = "0";
    var pending_service = "0";

    var stages_won = "0";
    var stages_lost = "0";
    var stages_negotiation_review = "0";
    var stages_nogo = "0";
    var stages_quote_for_buddget = "0";
    var stages_proposal = "0";
    var stages_perspectng = "0";

    var day_7 = "0";
    var day_14 = "0";
    var day_30 = "0";
    var day_60 = "0";
    var day_90 = "0";

    var pie_chart_type;
    var pie_chart_won;
    var bar_chart_stages;

    $(document).ready(function () {
        init();
    });

        function init(){
             var year = '@DateTime.Now.ToString("yyyy")';
             var name = '@Model.name';
             var role = '@Model.role';
             var department = '@Model.department';
             Role = role;
             $.ajax({
                url: '@Url.Action("GetUserDepartment", "Home")',
                type: "post",
                contentType: 'application/x-www-form-urlencoded',
                data: {
                    year,name,department, role
                },
                success: function (response) {
                    Years = add_year(response.years);
                    Sales = add_sale(response.sales);
                    Departments = add_department(response.departments);

                    initSale(role,Sales);
                    initYearDashboard(Years);

                    //draw pie chart
                    var name = document.getElementById("sale_name").value;
                    pie_chart_data(year,name);

                }
             });
        };
        $('#btn_OK').on('click', function () {
            $("#table_stages").empty();
             var name = document.getElementById("sale_name").value;
             var year = document.getElementById("years_dashboard").value;
             pie_chart_data(year,name);
        });

        $('#tab_b').on('click',function(){
             initDepartment(Role,Departments);
             initYearPerformance(Years);
        });

        $('#btn_performance_OK').on('click',function(){
            var year = document.getElementById("years_performance").value;
            var department = document.getElementById("departments").value;
            $.ajax({
                url: '@Url.Action("GetDataPerformance", "Home")',
                type: "post",
                contentType: 'application/x-www-form-urlencoded',
                data: {
                    year,department
                },
                success: function (response) {

                    UpdatePerformanceStack(response.performances_stack);
                    initPerformanceStack(response.performances_stack);

                    var datas = response.performances;
                    var dataSet = [];
                    for (var i = 0; i < datas.length; i++) {
                           var sum_target = (parseFloat(datas[i].product_target) + parseFloat(datas[i].project_target) +  parseFloat(datas[i].service_target)).toFixed(3);
                           var sum_actual = (parseFloat(datas[i].product_actual) + parseFloat(datas[i].project_actual) +  parseFloat(datas[i].service_actual)).toFixed(3);
                           var percent = ((sum_actual / sum_target) * 100).toFixed(2);
                           var data = [
                               datas[i].department,
                               datas[i].sale_name,
                               datas[i].product_target,
                               datas[i].product_actual,
                               datas[i].project_target,
                               datas[i].project_actual,
                               datas[i].service_target,
                               datas[i].service_actual,
                               sum_target,sum_actual,
                               percent
                               ];

                           dataSet.push(data);
                       }
                    tablePerformance(dataSet);
                }
            });
        });
        function initSale(role,Sales){
            $('#sale_name').empty();
            var selectsale = document.getElementById('sale_name');
            for (var i = 0, l = Sales.length; i < l; i++) {
                 var option = Sales[i];
                 selectsale.options.add(new Option(option.text, option.value, option.selected));
            }
            var index_sale = Sales.map(function (e) { return e.value; }).indexOf(name);
            if(role == "Admin"){
                 document.getElementById('sale_name').selectedIndex = 0;
            }else{
                 document.getElementById('sale_name').selectedIndex = index_sale;
            }
        };
        function initDepartment(role,Departments){
            //Department
            $('#departments').empty();
            var selectdepartment = document.getElementById('departments');
            for (var i = 0, l = Departments.length; i < l; i++) {
                 var option = Departments[i];
                 selectdepartment.options.add(new Option(option.text, option.value, option.selected));
            }
            var index_department = Departments.map(function (e) { return e.value; }).indexOf(name);
            if(role == "Admin"){
                document.getElementById('departments').selectedIndex = 0;
            }else{
                document.getElementById('departments').selectedIndex = index_department;
            }
        };

        function initYearDashboard(Years){
            //Year
            $('#years_dashboard').empty();
            var selectyear = document.getElementById('years_dashboard');
            for (var i = 0, l = Years.length; i < l; i++) {
                 var option = Years[i];
                 selectyear.options.add(new Option(option.text, option.value, option.selected));
            }
            document.getElementById('years_dashboard').selectedIndex = 0;
        };
        function initYearPerformance(Years){
            //Year
            $('#years_performance').empty();
            var selectyear = document.getElementById('years_performance');
            for (var i = 0, l = Years.length; i < l; i++) {
                 var option = Years[i];
                 selectyear.options.add(new Option(option.text, option.value, option.selected));
            }
            document.getElementById('years_performance').selectedIndex = 0;
        };

        function pie_chart_data(year,name){
             $.ajax({
                 url: '@Url.Action("GetData", "Home")',
                 type: "post",
                 contentType: 'application/x-www-form-urlencoded',
                 data: {
                     year,name
                 },
                 success: function (response) {
                     Datas = response.datas;
                     Data_Stages = response.stages;
                     Data_Stages_Day = response.day;

                     product = "0";
                     project = "0";
                     service = "0";

                     var _product = Datas.find(x => x.type === "Product" && x.stages === "");
                     var _project = Datas.find(x => x.type === "Project" && x.stages === "");
                     var _service = Datas.find(x => x.type === "Service" && x.stages === "");
                     if (typeof _product !== 'undefined') {
                         product = _product.mb;
                     }
                     if (typeof _project !== 'undefined') {
                         project = _project.mb;
                     }
                     if (typeof _service !== 'undefined') {
                         service = _service.mb;
                     }

                     // draw Won

                     won_product = "0";
                     won_project = "0";
                     won_service = "0";

                     var _won_product = Datas.find(x => x.type === "Product" && x.stages === "Closed(Won)");
                     var _won_project = Datas.find(x => x.type === "Project" && x.stages === "Closed(Won)");
                     var _won_service = Datas.find(x => x.type === "Service" && x.stages === "Closed(Won)");


                     if (typeof _won_product !== 'undefined') {
                         won_product = _won_product.mb;
                     }
                     if (typeof _won_project !== 'undefined') {
                         won_project = _won_project.mb;
                     }
                     if (typeof _won_service !== 'undefined') {
                         won_service = _won_service.mb;
                     }

                     //draw lost

                     lost_product = "0";
                     lost_project = "0";
                     lost_service = "0";

                     var _lost_product = Datas.find(x => x.type === "Product" && x.stages === "Closed(Lost)");
                     var _lost_project = Datas.find(x => x.type === "Project" && x.stages === "Closed(Lost)");
                     var _lost_service = Datas.find(x => x.type === "Service" && x.stages === "Closed(Lost)");

                     if (typeof _lost_product !== 'undefined') {
                         lost_product = _lost_product.mb;
                     }
                     if (typeof _lost_project !== 'undefined') {
                         lost_project = _lost_project.mb;
                     }
                     if (typeof _lost_service !== 'undefined') {
                         lost_service = _lost_service.mb;
                     }

                     // draw nogo

                     nogo_product = "0";
                     nogo_project = "0";
                     nogo_service = "0";

                     var _nogo_product = Datas.find(x => x.type === "Product" && x.stages === "No go");
                     var _nogo_project = Datas.find(x => x.type === "Project" && x.stages === "No go");
                     var _nogo_service = Datas.find(x => x.type === "Service" && x.stages === "No go");

                     if (typeof _nogo_product !== 'undefined') {
                         nogo_product = _nogo_product.mb;
                     }
                     if (typeof _nogo_project !== 'undefined') {
                         nogo_project = _nogo_project.mb;
                     }
                     if (typeof _nogo_service !== 'undefined') {
                         nogo_service = _nogo_service.mb;
                     }


                     //draw pending

                     pending_product = "0";
                     pending_project = "0";
                     pending_service = "0";

                     var _pending_product = Datas.find(x => x.type === "Product" && x.stages === "Pending");
                     var _pending_project = Datas.find(x => x.type === "Project" && x.stages === "Pending");
                     var _pending_service = Datas.find(x => x.type === "Service" && x.stages === "Pending");

                     if (typeof _pending_product !== 'undefined') {
                         pending_product = _pending_product.mb;
                     }
                     if (typeof _pending_project !== 'undefined') {
                         pending_project = _pending_project.mb;
                     }
                     if (typeof _pending_service !== 'undefined') {
                         pending_service = _pending_service.mb;
                     }


                     // draw all stages
                     stages_won = "0";
                     stages_lost = "0";
                     stages_negotiation_review = "0";
                     stages_nogo = "0";
                     stages_quote_for_buddget = "0";
                     stages_proposal = "0";
                     stages_perspectng = "0";

                     var _stages_won = Data_Stages.find(x => x.stages === "Closed(Won)");
                     var _stages_lost = Data_Stages.find(x => x.stages === "Closed(Lost)");
                     var _stages_negotiation_review = Data_Stages.find(x => x.stages === "Negotiation/Review");
                     var _stages_nogo = Data_Stages.find(x => x.stages === "No go");
                     var _stages_quote_for_buddget = Data_Stages.find(x => x.stages === "Quote for Budget");
                     var _stages_proposal = Data_Stages.find(x => x.stages === "Proposal/Quote for Order");
                     var _stages_perspectng = Data_Stages.find(x => x.stages === "Prospecting");

                     if (typeof _stages_won !== 'undefined') {
                         stages_won = _stages_won.mb;
                     }
                     if (typeof _stages_lost !== 'undefined') {
                         stages_lost = _stages_lost.mb;
                     }
                     if (typeof _stages_negotiation_review !== 'undefined') {
                         stages_negotiation_review = _stages_negotiation_review.mb;
                     }
                     if (typeof _stages_nogo !== 'undefined') {
                         stages_nogo = _stages_nogo.mb;
                     }
                     if (typeof _stages_quote_for_buddget !== 'undefined') {
                         stages_quote_for_buddget = _stages_quote_for_buddget.mb;
                     }
                     if (typeof _stages_proposal !== 'undefined') {
                         stages_proposal = _stages_proposal.mb;
                     }
                     if (typeof _stages_perspectng !== 'undefined') {
                         stages_perspectng = _stages_perspectng.mb;
                     }


                     UpdatePieChartType();
                     UpdatePieChartWon();
                     UpdatePieChartLost();
                     UpdatePieChartNogo();
                     UpdatePieChartPending();
                     UpdatePieChartStages();
                     PopulateDataBarChart(Data_Stages_Day);
                 }
             });
        };

        function UpdatePieChartType() {
            setTimeout(()=>{
                if (pie_chart_type != null)
                pie_chart_type.destroy();

            var datas = [product,project,service];

            var type = [ "Product", "Project", "Service"];

            var bg_colors = ['#41384D', '#725A7A', '#B8AAC3'];
            var border_colors = ['#41384D', '#725A7A', '#B8AAC3'];

            pie_chart_type = new Chart("pie_chart_type", {
                type: "pie",
                data: {
                    datasets: [
                        {
                            data: datas,
                            backgroundColor: bg_colors,
                            borderColor: border_colors,
                            borderWidth: 2,
                        }
                    ],
                    labels: type
                },
                options: {
                    plugins: {
                        title: {
                            display: true,
                            text: 'ALL',
                        },
                        legend: {
                            position: 'right',
                            display: true,
                            labels: {
                                color: '#FFFFFFC8',
                                font: {
                                    size: 14
                                }
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    var sum = parseFloat(product) + parseFloat(project) + parseFloat(service) ;
                                    var percent = ((context.parsed / sum) * 100).toFixed(2);
                                    let label = context.dataset.label || context.label;
                                    if (label) {
                                        label += ' : ' +  percent +   ' % , ' + context.parsed + " MB";
                                    }
                                    return label;
                                }
                            }
                        },
                    },
                    maintainAspectRatio: false,
                }
            });
            },200);
        };

        function UpdatePieChartWon() {
            setTimeout(()=>{
                 if (pie_chart_won != null)
                pie_chart_won.destroy();

            var datas = [won_product,won_project,won_service];

            var type = [ "Product", "Project", "Service"];

            var bg_colors = ['#205D5E', '#3F7857', '#7EC384'];
            var border_colors = ['#205D5E', '#3F7857', '#7EC384'];

            pie_chart_won = new Chart("pie_chart_won", {
                type: "pie",
                data: {
                    datasets: [
                        {
                            data: datas,
                            backgroundColor: bg_colors,
                            borderColor: border_colors,
                            borderWidth: 2,
                        }
                    ],
                    labels: type
                },
                options: {
                    plugins: {
                        title: {
                            display: true,
                            text: 'Won',
                        },
                        legend: {
                            position: 'right',
                            display: true,
                            labels: {
                                color: '#FFFFFFC8',
                                font: {
                                    size: 14
                                }
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    var sum = parseFloat(won_product) + parseFloat(won_project) + parseFloat(won_service) ;
                                    var percent = ((context.parsed / sum) * 100).toFixed(2);
                                    let label = context.dataset.label || context.label;
                                    if (label) {
                                        label += ' : ' +  percent +   ' % , ' + context.parsed + " MB";
                                    }
                                    return label;
                                }
                            }
                        },
                    },
                    maintainAspectRatio: false,
                }
            });
            },300);

        };
        var pie_chart_lost;
        function UpdatePieChartLost() {

            if (pie_chart_lost != null)
                pie_chart_lost.destroy();

            var datas = [lost_product,lost_project,lost_service];

            var type = [ "Product", "Project", "Service"];

            var bg_colors = ['#7E0306', '#D53E0F', '#FA8744'];
            var border_colors = ['#7E0306', '#D53E0F', '#FA8744'];

            pie_chart_lost = new Chart("pie_chart_lost", {
                type: "pie",
                data: {
                    datasets: [
                        {
                            data: datas,
                            backgroundColor: bg_colors,
                            borderColor: border_colors,
                            borderWidth: 2,
                        }
                    ],
                    labels: type
                },
                options: {
                    plugins: {
                        title: {
                            display: true,
                            text: 'Lost',
                        },
                        legend: {
                            position: 'right',
                            display: true,
                            labels: {
                                color: '#FFFFFFC8',
                                font: {
                                    size: 14
                                }
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    var sum = parseFloat(lost_product) + parseFloat(lost_project) + parseFloat(lost_service) ;
                                    var percent = ((context.parsed / sum) * 100).toFixed(2);
                                    let label = context.dataset.label || context.label;
                                    if (label) {
                                        label += ' : ' +  percent +   ' % , ' + context.parsed + " MB";
                                    }
                                    return label;
                                }
                            }
                        },
                    },
                    maintainAspectRatio: false,
                }
            });
        };

        var pie_chart_nogo;
        function UpdatePieChartNogo() {

            if (pie_chart_nogo != null)
                pie_chart_nogo.destroy();

            var datas = [nogo_product,nogo_project,nogo_service];

            var type = [ "Product", "Project", "Service"];

            var bg_colors = ['#686868', '#A6A6A6', '#D3D3D3'];
            var border_colors = ['#686868', '#A6A6A6', '#D3D3D3'];

            pie_chart_nogo = new Chart("pie_chart_nogo", {
                type: "pie",
                data: {
                    datasets: [
                        {
                            data: datas,
                            backgroundColor: bg_colors,
                            borderColor: border_colors,
                            borderWidth: 2,
                        }
                    ],
                    labels: type
                },
                options: {
                    plugins: {
                        title: {
                            display: true,
                            text: 'No go',
                        },
                        legend: {
                            position: 'right',
                            display: true,
                            labels: {
                                color: '#FFFFFFC8',
                                font: {
                                    size: 14
                                }
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    var sum = parseFloat(nogo_product) + parseFloat(nogo_project) + parseFloat(nogo_service) ;
                                    var percent = ((context.parsed / sum) * 100).toFixed(2);
                                    let label = context.dataset.label || context.label;
                                    if (label) {
                                        label += ' : ' +  percent +   ' % , ' + context.parsed + " MB";
                                    }
                                    return label;
                                }
                            }
                        },
                    },
                    maintainAspectRatio: false,
                }
            });
        };

        var pie_chart_pending;
        function UpdatePieChartPending() {

            if (pie_chart_pending != null)
                pie_chart_pending.destroy();

            var datas = [pending_product,pending_project,pending_service];

            var type = [ "Product", "Project", "Service"];

            var bg_colors = ['#C78B05', '#FFC000', '#F8E07E'];
            var border_colors = ['#C78B05', '#FFC000', '#F8E07E'];

            pie_chart_pending = new Chart("pie_chart_pending", {
                type: "pie",
                data: {
                    datasets: [
                        {
                            data: datas,
                            backgroundColor: bg_colors,
                            borderColor: border_colors,
                            borderWidth: 2,
                        }
                    ],
                    labels: type
                },
                options: {
                    plugins: {
                        title: {
                            display: true,
                            text: 'Pending',
                        },
                        legend: {
                            position: 'right',
                            display: true,
                            labels: {
                                color: '#FFFFFFC8',
                                font: {
                                    size: 14
                                }
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    var sum = parseFloat(pending_product) + parseFloat(pending_project) + parseFloat(pending_service) ;
                                    var percent = ((context.parsed / sum) * 100).toFixed(2);
                                    let label = context.dataset.label || context.label;
                                    if (label) {
                                        label += ' : ' +  percent +   ' % , ' + context.parsed + " MB";
                                    }
                                    return label;
                                }
                            }
                        },
                    },
                    maintainAspectRatio: false,
                }
            });
        };

        var pie_chart_stages;
        function UpdatePieChartStages() {

            if (pie_chart_stages != null)
                pie_chart_stages.destroy();

            var datas = [stages_quote_for_buddget,stages_negotiation_review,stages_proposal,stages_perspectng,stages_won,stages_lost,stages_nogo];

            var type = ["Quote for Budget", "Negotiation/Review", "Proposal/Quote for Order","Prospecting ","Closed (Won)","Closed (Lost)","No go"];

            var bg_colors = ['#083470', '#1C4C97', '#2484C6','#84C2ED', '#D6D6D6', '#B0B0B0','#7D7D7D'];
            var border_colors = ['#083470', '#1C4C97', '#2484C6','#84C2ED', '#D6D6D6', '#B0B0B0','#7D7D7D'];

            pie_chart_stages = new Chart("pie_chart_stages", {
                type: "pie",
                data: {
                    datasets: [
                        {
                            data: datas,
                            backgroundColor: bg_colors,
                            borderColor: border_colors,
                            borderWidth: 2,
                        }
                    ],
                    labels: type
                },
                options: {
                    plugins: {
                        title: {
                            display: true,
                            text: 'Stages',
                        },
                        legend: {
                            position: 'right',
                            display: true,
                            labels: {
                                color: '#FFFFFFC8',
                                font: {
                                    size: 14
                                }
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    var sum = parseFloat(stages_quote_for_buddget) + parseFloat(stages_negotiation_review) + parseFloat(stages_proposal) +
                                              parseFloat(stages_perspectng) + parseFloat(stages_won) + parseFloat(stages_lost) + parseFloat(stages_nogo);
                                    var percent = ((context.parsed / sum) * 100).toFixed(2);
                                    let label = context.dataset.label || context.label;
                                    if (label) {
                                        label += ' : ' +  percent +   ' % , ' + context.parsed + " MB";
                                    }
                                    return label;
                                }
                            }
                        },
                    },
                    maintainAspectRatio: false,
                }
            });
        };

        var performance_stack;
        function UpdatePerformanceStack(datas){
            if (performance_stack != null){
                performance_stack.destroy();

            }
            var chartName = "performance_bar";
            var ctx = document.getElementById(chartName).getContext('2d');

            var names = [];
            var products_target = [];
            var products_actual = [];
            var projects_target = [];
            var projects_actual = [];
            var services_target = [];
            var services_actual = [];

            //get datas
            for (var i =0; i<datas.length;i++){
                names.push(datas[i].sale_name);
                products_target.push(datas[i].product_target);
                products_actual.push(datas[i].product_actual);
                projects_target.push(datas[i].project_target);
                projects_actual.push(datas[i].project_actual);
                services_target.push(datas[i].service_target);
                services_actual.push(datas[i].service_actual);
            }
            var labels = names;
            const data = {
                              labels: labels,
                              datasets: [
                                {
                                  label: 'Product Target',
                                  data: products_target,
                                  backgroundColor: '#73B2E7',
                                  stack: 'Stack 0',
                                },
                                {
                                  label: 'Product Actual',
                                  data: products_actual,
                                  backgroundColor: '#4786E0',
                                  stack: 'Stack 1',
                                },
                                {
                                  label: 'Project Target',
                                  data: projects_target,
                                  backgroundColor: '#79EE31',
                                  stack: 'Stack 0',
                                },
                                {
                                  label: 'Project Actual',
                                  data: projects_actual,
                                  backgroundColor: '#1EC819',
                                  stack: 'Stack 1',
                                },
                                {
                                  label: 'Service Target',
                                  data: services_target,
                                  backgroundColor: '#EA8A1E',
                                  stack: 'Stack 0',
                                },
                                {
                                  label: 'Service Actual',
                                  data: services_actual,
                                  backgroundColor: '#F04D15',
                                  stack: 'Stack 1',
                                },
                              ],
                        };

                        const options = {
                              plugins: {
                                title: {
                                  display: true,
                                  text: 'Performance'
                                },
                              },
                              interaction: {
                                  intersect: false,
                              },
                              responsive: true,
                              scales: {
                                x: {
                                  stacked: true,
                                },
                                y: {
                                  stacked: true
                                }
                              }

                        };
                        performance_stack = new Chart(ctx, { type: 'bar', data: data, options: options });

        };

        function PopulateDataBarChart(datas) {
            $(function () {
                if (bar_chart_stages != null)
                    bar_chart_stages.destroy();
                var chartName = "bar_chart_stages";
                var ctx = document.getElementById(chartName).getContext('2d');
                var _datas = [datas.day_0, datas.day_7, datas.day_14, datas.day_30, datas.day_60];

                var type = ["< 7 Day", "< 14 Day", "< 30 Day","< 60 Day","> 60 Day"];

                var bg_colors = ['#F1F48F', '#E2D445', '#DEA824', '#DE8124', '#E35812'];
                var border_colors = ['#F1F48F', '#E2D445', '#DEA824', '#DE8124', '#E35812'];
                var data = {
                    datasets: [
                        {
                            data: _datas,
                            backgroundColor: bg_colors,
                            borderColor: border_colors,
                            borderWidth: 2,
                        }
                    ],
                    labels: type
                }
                var options = {
                    maintainAspectRatio: false,
                    scales: {
                        yAxes: [{
                            id: 'first-y-axis',
                            position: 'left',
                            type: 'linear',
                            scaleLabel: { display: true, labelString: 'Count' },
                            gridLines: { display: true, color:'#FFFFFFC8'},
                            ticks: { min: 0, beginAtZero: true },
                        }],
                        xAxes: [{
                            ticks: { min: 0, beginAtZero: true },
                            scaleLabel: { display: true, labelString: 'Day' },
                            gridLines: { display: false }
                        }],
                    },
                    plugins: {
                        title: {
                            display: true,
                            text: "Stages Day",
                            fontColor: "white",
                            fontSize: 24,
                        },
                        legend: {
                            position: 'top',
                            display: false,
                            labels: {
                                color: '#FFFFFFC8',
                                font: {
                                    size: 14
                                }
                            }
                        }
                    },
                    onHover: (event, chartElement) => {

                        /*event.target.style.cursor = chartElement[0] ? 'pointer' : 'default';*/
                    },
                    onClick: BarChartClick
                };
                bar_chart_stages = new Chart(ctx, { type: 'bar', data: data, options: options });
            });
        };
        function BarChartClick(evt, point) {
            $("#table_stages").empty();
            var name = document.getElementById("sale_name").value;
            if (point.length > 0) {
                var index = point[0].index;
                var day = "";
                if (index == 0) {
                    day = " < 7";
                } else if (index == 1) {
                    day = "between 7 and 13";
                } else if (index == 2) {
                    day = "between 14 and 29";
                } else if (index == 3) {
                    day = "between 30 and 59";
                } else if (index == 4) {
                    day = " > 60";
                }

                $.ajax({
                    url: '@Url.Action("GetStagesDay", "Home")',
                    type: "post",
                    contentType: 'application/x-www-form-urlencoded',
                    data: {
                        name, day
                    },
                    success: function (response) {
                        var datas = response;
                        var dataSet = [];
                        for (var i = 0; i < datas.length; i++) {
                            var data = [
                                datas[i].quotation_no,
                                datas[i].stages,
                                datas[i].stages_update_date];
                            dataSet.push(data);
                        }
                        table(dataSet);
                    }
                });
            }
        };

        var tables;
        function table(dataSet) {
            if (tables !== undefined)
                tables.destroy();
                tables = $('#table_stages').DataTable({
                data: dataSet,
                columns: [
                    { title: "Quotation"},
                    { title: "Stages"},
                    { title: "Stages Date" },
                ],
                "columnDefs": [
                    {
                        "targets": [0, 1, 2],
                        "className": "dt-center",

                    },
                ],
                "paging": false,
                "searching": false,
                "bInfo": false,
                "scrollX": true,
                "fixedHeader":true,
            });
            $(tables.table().body()).addClass('text-dark');
        }

        var tables_performance;
        function tablePerformance(dataSet) {
            setTimeout(()=>{
                if (tables_performance !== undefined)
                    tables_performance.destroy();
                tables_performance = $('#table_performance').DataTable({
                data: dataSet,
                "columnDefs": [
                    {
                        "targets": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                        "className": "text-center",
                    },
                ],
                "createdRow": function (row, data, index) {
                    if (data[0] === "Total") {
                        $('td', row).css('background-color', '#E3C871');
                        $('td', row).addClass('highlight');
                    }
                },
                "paging": false,
                "searching": false,
                "bInfo": false,
                "scrollX": true,
            });

            $(tables_performance.table().body()).addClass('text-dark');
            },100);
        };

        function initPerformanceStack(datas){
                    var dataSet = [];
                    var total_target = 0;
                    var total_actual = 0;
                    for (var i = 0; i < datas.length; i++) {
                           var sum_target = (parseFloat(datas[i].product_target) + parseFloat(datas[i].project_target) +  parseFloat(datas[i].service_target)).toFixed(3);
                           var sum_actual = (parseFloat(datas[i].product_actual) + parseFloat(datas[i].project_actual) +  parseFloat(datas[i].service_actual)).toFixed(3);
                           var percent = ((sum_actual / sum_target) * 100).toFixed(2);
                           total_target += parseFloat(sum_target);
                           total_actual += parseFloat(sum_actual);
                           var data = [
                               datas[i].sale_name,
                               sum_target,
                               sum_actual,
                               percent
                               ];

                           dataSet.push(data);
                       }
                       var total_percent = ((total_actual / total_target) *100).toFixed(2);
                       dataSet.push(["Total",total_target.toFixed(3),total_actual.toFixed(3),total_percent]);
                    tablePerformanceStack(dataSet);
        };
        var tables_performance_stack;
        function tablePerformanceStack(dataSet) {
            setTimeout(()=>{
                if (tables_performance_stack !== undefined)
                    tables_performance_stack.destroy();

                tables_performance_stack = $('#table_performance_stack').DataTable({
                data: dataSet,
                "columnDefs": [
                    {
                        "targets": [0, 1, 2, 3],
                        "className": "text-center",
                    },
                ],
                 "createdRow": function (row, data, index) {
                    if (data[0] === "Total") {
                        $('td', row).css('background-color', '#E3C871');
                        $('td', row).addClass('highlight');
                    }
                },
                "paging": false,
                "searching": false,
                "bInfo": false,
                "scrollX": true,
            });

            $(tables_performance_stack.table().body()).addClass('text-dark');
            },100);
        };

        function add_department(departments) {
                var data_departments = [];
                for (var i = 0; i < departments.length; i++) {
                    var data =
                    {
                        "text": departments[i].department,
                        "value": departments[i].department,
                    }
                    data_departments.push(data);
                }

                return data_departments;
        };

        function add_sale(sales) {
                var data_sales = [];
                for (var i = 0; i < sales.length; i++) {
                    var data =
                    {
                        "text": sales[i].name,
                        "value": sales[i].name,
                    }
                    data_sales.push(data);
                }

                return data_sales;
        };
        function add_year(years) {
                var data_years = [];
                for (var i = 0; i < years.length; i++) {
                    var data =
                    {
                        "text": years[i],
                        "value": years[i],
                    }
                    data_years.push(data);
                }

                return data_years;
        };
</script>
    }
